version: '2.0'
name: st2ci.mistral
description: Run the continuous integration for Mistral.

workflows:

    main:
        type: direct
        input:
            - test_host
            - build_host
            - distro
            - mis_repo_base
            - mis_repo_main
            - mis_repo_client
            - mis_repo_action
            - mis_repo_branch
            - mis_repo_dir
            - mis_db_type
            - mis_db_name
            - mis_db_user_name
            - mis_db_user_pass
            - mis_db_root_pass
            - mis_api_port
            - st2_repo
            - st2_repo_branch
            - st2_repo_dir
            - merge_upstream
            - debug
            - notify_channels:
                - "#thunderdome"
            - notify_failure_channels:
                - "#thunderdome"
                - "#stackstorm"
        output:
            hosts: <% $.hosts %>
            shas: <% $.shas %>
            deps: <% $.deps %>
        task-defaults:
            on-error:
                - teardown_on_failure: <% not $.debug %>
                - notify_failure: <% $.debug %>
        tasks:
            init_vars:
                action: core.noop
                publish:
                    webui_base_url: https://st2cicd.uswest2.stackstorm.net
                    is_infra_setup: False
                on-success:
                    - notify_start
                    - get_hosts
            get_hosts:
                workflow: get_build_hosts
                input:
                    hosts: <% dict(test=>$.test_host, build=>$.build_host) %>
                publish:
                    hosts: <% task(get_hosts).result.hosts %>
                on-success:
                    - setup
            setup:
                workflow: setup_infra
                input:
                    host: <% $.hosts.get(test) %>
                    distro: <% $.distro %>
                    mis_repo_base: <% $.mis_repo_base %>
                    mis_repo_main: <% $.mis_repo_main %>
                    mis_repo_client: <% $.mis_repo_client %>
                    mis_repo_action: <% $.mis_repo_action %>
                    mis_repo_branch: <% $.mis_repo_branch %>
                    mis_repo_dir: <% $.mis_repo_dir %>
                    mis_db_type: <% $.mis_db_type %>
                    mis_db_name: <% $.mis_db_name %>
                    mis_db_user_name: <% $.mis_db_user_name %>
                    mis_db_user_pass: <% $.mis_db_user_pass %>
                    mis_db_root_pass: <% $.mis_db_root_pass %>
                    mis_api_port: <% $.mis_api_port %>
                    st2_repo: <% $.st2_repo %>
                    st2_repo_branch: <% $.st2_repo_branch %>
                    st2_repo_dir: <% $.st2_repo_dir %>
                    debug: <% $.debug %>
                publish:
                    is_infra_setup: <% task(setup).result.is_mistral_setup and task(setup).result.is_st2_setup %>
                on-success:
                    - run_tests: <% $.is_infra_setup %>
                    - teardown_on_failure: <% not $.is_infra_setup and not $.debug %>
            run_tests:
                action: core.remote
                input:
                    hosts: <% $.hosts.get(test) %>
                    cwd: <% task(setup).result.clones.get(st2) %>
                    cmd: make mistral-itests 2>&1 | tee /tmp/mistral-itests-output.txt
                    timeout: 3600
                on-success:
                    - record_pip_freeze
            record_pip_freeze:
                action: core.remote
                input:
                    hosts: <% $.hosts.get(test) %>
                    cmd: . <% task(setup).result.clones.get(mistral) %>/.venv/bin/activate && pip freeze
                publish:
                    deps: <% task(record_pip_freeze).result.get($.hosts.get(test)).stdout %>
                on-success:
                    - get_commit_shas
            get_commit_shas:
                workflow: get_commit_shas
                input:
                    host: <% $.hosts.get(test) %>
                    repos: <% task(setup).result.clones %>
                publish:
                    shas: <% task(get_commit_shas).result.shas %>
                on-success:
                    - merge_upstreams: <% $.merge_upstream and $.mis_repo_base = openstack %>
                    - teardown: <% not $.merge_upstream or $.mis_repo_base = stackstorm %>
            merge_upstreams:
                workflow: merge_upstreams
                input:
                    host: <% $.hosts.get(build) %>
                    shas: <% $.shas %>
                on-success:
                    - teardown
            teardown:
                workflow: teardown_infra
                input:
                    host: <% $.hosts.get(test) %>
                    clones: <% task(setup).result.clones %>
                    backup: False
                on-success:
                    - notify_success
                on-error:
                    - notify_failure


            # Declare error handler(s) for the main workflow here.
            teardown_on_failure:
                workflow: teardown_infra
                input:
                    host: <% $.hosts.get(test) %>
                    clones: <% task(setup).result.clones %>
                    backup: <% $.is_infra_setup %>
                on-complete:
                    - notify_failure


            # Declare notification handler(s) for the main workflow here.
            notify_start:
                with-items: channel in <% $.notify_channels %>
                action: slack.chat.postMessage
                input:
                    channel: <% $.channel %>
                    text: ""
                    attachments: '[{"fallback": "[st2ci.mistral: STARTED]", "title": "[st2ci.mistral: STARTED]", "title_link": "<% $.webui_base_url %>/#/history/<% env().st2_execution_id %>/general", "text": "REPO: <% $.mis_repo_base %>\nMERGE UPSTREAM: <% $.merge_upstream %>", "color": "#808080"}]'

            notify_success:
                with-items: channel in <% $.notify_channels %>
                action: slack.chat.postMessage
                input:
                    channel: <% $.channel %>
                    text: ""
                    attachments: '[{"fallback": "[st2ci.mistral: SUCCEEDED]", "title": "[st2ci.mistral: SUCCEEDED]", "title_link": "<% $.webui_base_url %>/#/history/<% env().st2_execution_id %>/general", "text": "REPO: <% $.mis_repo_base %>\nMERGE UPSTREAM: <% $.merge_upstream %>", "color": "#008000"}]'

            notify_failure:
                with-items: channel in <% $.notify_failure_channels %>
                action: slack.chat.postMessage
                input:
                    channel: <% $.channel %>
                    text: ""
                    attachments: '[{"fallback": "[st2ci.mistral: FAILED]", "title": "[st2ci.mistral: FAILED]", "title_link": "<% $.webui_base_url %>/#/history/<% env().st2_execution_id %>/general", "text": "REPO: <% $.mis_repo_base %>\nMERGE UPSTREAM: <% $.merge_upstream %>\nHOSTNAME: <% $.hosts.get(test) %>\nINFRA SETUP: <% $.is_infra_setup %>", "color": "#FF0000"}]'
                on-complete:
                    - fail


    get_host:
        type: direct
        input:
            - host
            - type
        output:
            host: <% $.host %>
        tasks:
            has_host:
                action: std.noop
                on-success:
                    - get_host: <% $.host = null or $.host = '' or $.host = 'None' %>
                    - succeed: <% $.host != null and $.host != '' and $.host != 'None' %>
            get_host:
                action: linux.dig
                input:
                    hostname: <% $.type %>
                    rand: true
                    count: 1
                publish:
                    host: <% task(get_host).result.result[0] %>


    get_build_hosts:
        type: direct
        input:
            - hosts
        output:
            hosts: <% $.hosts %>
        tasks:
            get_test_host:
                workflow: get_host
                input:
                    host: <% $.hosts.get(test) %>
                    type: st2-build-slave-itests-ubuntu.service.consul
                on-success:
                    - get_build_host
            get_build_host:
                workflow: get_host
                input:
                    host: <% $.hosts.get(build) %>
                    type: st2-build-slave-ubuntu.service.consul
                on-success:
                    - compose_hosts
            compose_hosts:
                action: std.noop
                publish:
                    hosts: <% dict(test=>task(get_test_host).result.host,
                                   build=>task(get_build_host).result.host) %>


    setup_infra:
        type: direct
        input:
            - host
            - distro
            - mis_repo_base
            - mis_repo_main
            - mis_repo_client
            - mis_repo_action
            - mis_repo_branch
            - mis_repo_dir
            - mis_db_type
            - mis_db_name
            - mis_db_user_name
            - mis_db_user_pass
            - mis_db_root_pass
            - mis_api_port
            - st2_repo
            - st2_repo_branch
            - st2_repo_dir
            - debug
        output:
            is_mistral_setup: <% $.is_mistral_setup %>
            is_st2_setup: <% $.is_st2_setup %>
            clones: <% dict(mistral=>$.mistral_clone_path,
                            mistralclient=>$.mistralclient_clone_path,
                            st2mistral=>$.st2mistral_clone_path,
                            st2=>$.st2_clone_path) %>
        tasks:
            init_vars:
                action: std.noop
                publish:
                    is_mistral_setup: False
                    is_st2_setup: False
                    mistral_clone_path: null
                    mistralclient_clone_path: null
                    st2mistral_clone_path: null
                    st2_clone_path: null
                on-success:
                    - setup_mistral
            setup_mistral:
                action: mistral_dev.setup
                input:
                    host: <% $.host %>
                    distro: <% $.distro %>
                    repo_base: <% $.mis_repo_base %>
                    repo_main: <% $.mis_repo_main %>
                    repo_client: <% $.mis_repo_client %>
                    repo_action: <% $.mis_repo_action %>
                    repo_branch: <% $.mis_repo_branch %>
                    repo_dir: <% $.mis_repo_dir %>
                    db_type: <% $.mis_db_type %>
                    db_name: <% $.mis_db_name %>
                    db_user_name: <% $.mis_db_user_name %>
                    db_user_pass: <% $.mis_db_user_pass %>
                    db_root_pass: <% $.mis_db_root_pass %>
                    api_port: <% $.mis_api_port %>
                    debug: <% $.debug %>
                publish:
                    mistral_clone_path: <% task(setup_mistral).result.clone_paths.get(mistral) %>
                    mistralclient_clone_path: <% task(setup_mistral).result.clone_paths.get(mistralclient) %>
                    st2mistral_clone_path: <% task(setup_mistral).result.clone_paths.get(st2mistral) %>
                    is_mistral_setup: True
                on-success:
                    - setup_st2
                on-error:
                    - noop
            setup_st2:
                action: st2ci.setup_st2
                input:
                    host: <% $.host %>
                    repo: <% $.st2_repo %>
                    repo_branch: <% $.st2_repo_branch %>
                    repo_dir: <% $.st2_repo_dir %>
                    debug: <% $.debug %>
                publish:
                    st2_clone_path: <% task(setup_st2).result.clone_path %>
                    is_st2_setup: True
                on-error:
                    - noop


    teardown_infra:
        type: direct
        input:
            - host
            - clones
            - backup: False
        tasks:
            init:
                action: std.noop
                on-complete:
                    - backup_logs: <% $.backup %>
                    - teardown_mistral: <% not $.backup and $.clones.get(mistral, '') != '' %>
                    - teardown_st2: <% not $.backup and $.clones.get(st2, '') != '' %>
            backup_logs:
                action: st2ci.backup_logs
                input:
                    hosts: <% $.host %>
                    st2_execution_id: <% env().st2_execution_id %>
                    mis_repo_dir: <% $.clones.get(mistral) %>
                    mis_log_dir: /var/log
                    st2_repo_dir: <% $.clones.get(st2) %>
                    st2_log_dir: <% $.clones.get(st2) %>/logs
                    backup_dir: /home/stanley/logs
                on-complete:
                    - teardown_mistral: <% $.clones.get(mistral, '') != '' %>
                    - teardown_st2: <% $.clones.get(st2, '') != '' %>
            teardown_mistral:
                action: mistral_dev.teardown
                input:
                    host: <% $.host %>
                    repo_main: <% $.clones.get(mistral) %>
                    repo_client: <% $.clones.get(mistralclient) %>
                    repo_action: <% $.clones.get(st2mistral) %>
            teardown_st2:
                action: st2ci.teardown_st2
                input:
                    host: <% $.host %>
                    repo: <% $.clones.get(st2) %>


    get_commit_shas:
        type: direct
        input:
            - host
            - repos
        output:
            shas: <% $.shas %>
        tasks:
            get_mistral_sha:
                action: core.remote
                input:
                    hosts: <% $.host %>
                    cmd: cd <% $.repos.get(mistral) %> && echo `git rev-parse HEAD`
                on-success:
                    - get_mistralclient_sha
            get_mistralclient_sha:
                action: core.remote
                input:
                    hosts: <% $.host %>
                    cmd: cd <% $.repos.get(mistralclient) %> && echo `git rev-parse HEAD`
                on-success:
                    - compose_shas
            compose_shas:
                action: std.noop
                publish:
                    shas: <% dict(mistral=>task(get_mistral_sha).result.get($.host).stdout,
                                  mistralclient=>task(get_mistralclient_sha).result.get($.host).stdout) %>


    merge_upstreams:
        type: direct
        input:
            - host
            - shas
        tasks:
            merge_mistral:
                action: st2ci.git_merge_upstream
                input:
                    hosts: <% $.host %>
                    name: mistral
                    repo: git@github.com:stackstorm/mistral.git
                    repo_upstream: git@github.com:openstack/mistral.git
                    commit_sha: <% $.shas.get(mistral) %>
                on-success:
                    - merge_mistralclient
            merge_mistralclient:
                action: st2ci.git_merge_upstream
                input:
                    hosts: <% $.host %>
                    name: python-mistralclient
                    repo: git@github.com:stackstorm/python-mistralclient.git
                    repo_upstream: git@github.com:openstack/python-mistralclient.git
                    commit_sha: <% $.shas.get(mistralclient) %>
