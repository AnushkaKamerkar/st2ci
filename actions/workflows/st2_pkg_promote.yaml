---
version: '1.0'
description: Promote a StackStorm package from staging to production repo
input:
  - package
  - release
  - version
  - revision
  - distro_version
  - api_token
  - timeout:
  - distro_arch_map:
      debian: amd64
      el: x86_64
      ubuntu: amd64
  - distro_pkg_type_map:
      debian: deb
      el: rpm
      ubuntu: deb
vars:
  - prd_repo: StackStorm/<% ctx().release %>
  - stg_repo: StackStorm/staging-<% ctx().release %>
  - arch: <% ctx().distro_arch_map.get(ctx().distro_version.split("/")[0]) %>
  - package_type: <% ctx().distro_pkg_type_map.get(ctx().distro_version.split("/")[0]) %>
  - packagecloud_api_url: <% "https://" + ctx().api_token + ":@packagecloud.io"  %>
output:
  - package: <% ctx().package %>
  - release: <% ctx().release %>
  - version: <% ctx().version %>
  - revision: <% ctx().revision %>
  - distro_version: <% ctx().distro_version %>
  - arch: <% ctx().arch %>
  - package_type: <% ctx().package_type %>
  - stg_repo: <% ctx().stg_repo %>
  - prd_repo: <% ctx().prd_repo %>
tasks:
  get_pkgs_list:
    action: packagecloud.list_packages
    input:
      repo: <% ctx().stg_repo %>
      package: <% ctx().package %>
      distro_version: <% ctx().distro_version %>
      version: <% ctx().version %>
      release: <% ctx().revision %>
    next:
      - when: <% succeeded() %>
        publish:
          - pkgs_list: <% result().result %>
      - when: <% succeeded() and (len(ctx().pkgs_list) > 0) %>
        do:
          - get_pkg_meta
      - when: <% succeeded() and (len(ctx().pkgs_list) <= 0) %>
        do:
          - fail
  get_pkg_meta:
    next:
      - when: <% succeeded() %>
        publish:
          - revision: <% coalesce(ctx().revision, ctx().pkgs_list.first().get('release')) %>
          - stg_pkg_url: <% ctx().packagecloud_api_url + ctx().pkgs_list.first().get('package_url') %>
          - prd_pkg_url: <% ctx().packagecloud_api_url + ctx().pkgs_list.first().get('package_url').replace(ctx().stg_repo, ctx().prd_repo) %>
        do:
          - get_stg_pkg_info
  get_stg_pkg_info:
    action: core.http
    input:
      url: <% ctx().stg_pkg_url %>
    next:
      - when: <% succeeded() %>
        publish:
          - download_url: <% result().body.download_url %>
          - filename: <% result().body.filename %>
          - url: <% result().body.package_html_url %>
        do:
          - get_prd_pkg_info
  get_prd_pkg_info:
    action: core.http
    input:
      url: <% ctx().prd_pkg_url %>
    next:
      - when: <% succeeded() %>
        do:
          - checksum
      - when: <% failed() and (result().get(status_code, 0) = 404) %>
        do:
          - promote
      - when: <% failed() and (result().get(status_code, 0) != 404) %>
        do:
          - notify_failure
  checksum:
    action: std.noop
    next:
      - when: <% result().body.sha512sum = result().body.sha512sum %>
        do:
          - notify_success
      - when: <% result().body.sha512sum != result().body.sha512sum %>
        do:
          - notify_failure
  promote:
    next:
      - do:
          - get_pkg_filename
  get_pkg_filename:
    action: core.local
    input:
      cmd: date +'%s'
    next:
      - when: <% succeeded() %>
        publish:
          - target: <% str(result().stdout) + '-' + str(random(100000, 999999)) + '-' + ctx().filename %>
        do:
          - download_stg_pkg
  download_stg_pkg:
    action: core.local
    input:
      cmd: wget -O /tmp/<% ctx().target %> <% ctx().download_url %>
      timeout: <% ctx().timeout %>
    next:
      - when: <% succeeded() %>
        do:
          - upload_stg_pkg_to_prd
  upload_stg_pkg_to_prd:
    action: core.local
    input:
      env:
        LANG: en_US.utf8
        PACKAGECLOUD_TOKEN: <% ctx().api_token %>
      cmd: package_cloud push <% ctx().prd_repo %>/<% ctx().distro_version %> /tmp/<% ctx().target %>
      timeout: <% ctx().timeout %>
    next:
      - when: <% succeeded() %>
        do:
          - notify_success
      - when: <% failed() %>
        do:
          - notify_failure
      - do:
          - cleanup
  cleanup:
    action: core.local
    input:
      cmd: rm -rf /tmp/<% ctx().target %>
  notify_success:
    action: std.noop
  notify_failure:
    action: std.fail
