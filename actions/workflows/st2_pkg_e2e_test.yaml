---
version: '1.0'
input:
  - hostname
  - dns_zone
  - instance_type
  - environment
  - key_name
  - keyfile
  - windows_key_name
  - windows_keyfile
  - distro
  - windows_distro
  - role
  - release
  - version
  - dev_build
  - initial_commit
  - enterprise
  - enterprise_key
  - pkg_env
  - bootstrap_branch
  - bootstrap_script
  - triggering_commit_url
  - debug
vars:
  - webui_base_url: "https://st2cicd.uswest2.stackstorm.net"
  - vm_id:
  - vm_windows_id:
  - vm_fqdn: <% ctx().hostname %>.<% ctx().dns_zone %>
  - vm_info:
  - windows_hostname: <% ctx().hostname %>win
  - vm_windows_fqdn: <% ctx().hostname %>win.<% ctx().dns_zone %>
  - installed:
      distro:
      versions:
      version_str: not installed
  - bootstrap_script_url: <% coalesce(ctx().bootstrap_script, "https://raw.githubusercontent.com/StackStorm/st2-packages/" + ctx().bootstrap_branch + "/scripts/st2_bootstrap.sh") %>
  - st2_username: st2admin
  - st2_password: Ch@ngeMe
  - github_status_org: StackStorm
  - github_status_repo: st2
  - github_status_context: st2/e2e/<% ctx().distro.toLower() %><% ctx().enterprise and '-enterprise' or '' %>
  - github_status_url: ''
  - result: null
  - destroy_vm_iteration_count: 0
  - destroy_vm_windows_iteration_count: 0
  - notify_channels:
      - '#thunderdome'
  - notify_failure_channels:
      - '#thunderdome'
      - '#stackstorm'
output:
  - versions: <% ctx().installed.versions %>
tasks:
  get_webui_server:
    action: core.noop
    next:
      - publish:
        - github_status_url: https://buildstatus.stackstorm.org/execution/<% ctx().st2.action_execution_id %>
      - when: <% succeeded() and (ctx().initial_commit != null) %>
        do:
          - notify_start
          - set_github_status_pending
      - when: <% succeeded() and (ctx().initial_commit = null) %>
        do:
          - notify_start
          - create_vm
  notify_start:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_e2e_test: STARTED'
      attachments: "[{\"fallback\": \"[st2ci.st2_pkg_e2e_test: STARTED]\", \"title\": \"[st2ci.st2_pkg_e2e_test: STARTED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx('st2').action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nENTERPRISE: <% ctx().enterprise %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nVERSION: <% coalesce(ctx().version, 'latest') %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#808080\"}]"
  set_github_status_pending:
    action: github.add_status
    input:
      user: <% ctx().github_status_org %>
      repo: <% ctx().github_status_repo %>
      sha: <% ctx().initial_commit %>
      state: pending
      context: <% ctx().github_status_context %>
      description: E2E tests are running...
      target_url: <% ctx().github_status_url %>
    next:
      - when: <% succeeded() %>
        do:
          - create_vm
  create_vm:
    action: st2cd.create_vm_role
    input:
      hostname: <% ctx().hostname %>
      instance_type: <% ctx().instance_type %>
      environment: <% ctx().environment %>
      key_name: <% ctx().key_name %>
      keyfile: <% ctx().keyfile %>
      dns_zone: <% ctx().dns_zone %>
      distro: pkg_<% ctx().distro %>
      role: <% ctx().role %>
    next:
      - when: <% succeeded() and (ctx().distro = 'RHEL6') %>
        publish:
          - vm_info: <% result().output.vm_info %>
          - vm_id: <% result().output.vm_info.id %>
        do:
          - patch_rhel6
      - when: <% succeeded() and (ctx().distro != 'RHEL6') %>
        publish:
          - vm_info: <% result().output.vm_info %>
          - vm_id: <% result().output.vm_info.id %>
        do:
          - get_bootstrap_script
      - when: <% failed() %>
        publish:
          - result: failed
        do:
          - cleanup
  patch_rhel6:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: yum-config-manager --enable rhui-REGION-rhel-server-releases-optional
    next:
      - when: <% succeeded() %>
        do:
          - patch_rhel6_curl
  patch_rhel6_curl:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: yum install -y curl nss
      timeout: 180
    next:
      - when: <% succeeded() %>
        do:
          - get_bootstrap_script
  get_bootstrap_script:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: curl -Ss -k -o /tmp/st2_bootstrap.sh <% ctx().bootstrap_script_url %>
    next:
      - when: <% succeeded() and (not ctx().dev_build) %>
        do:
          - run_bootstrap_script
      - when: <% succeeded() and (ctx().dev_build) %>
        do:
          - run_bootstrap_script_dev
  run_bootstrap_script:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: >-
        bash /tmp/st2_bootstrap.sh
        --<% ctx().pkg_env %>
        --<% ctx().release %>
        --version=<% coalesce(ctx().version, '') %>
        --user=<% ctx().st2_username %>
        --password=<% ctx().st2_password %>
      timeout: 900
    next:
      - when: <% succeeded() and (ctx().enterprise) %>
        do:
          - upgrade_to_enterprise
      - when: <% succeeded() and (not ctx().enterprise) %>
        do:
          - check_debug_mode
      - when: <% failed() %>
        publish:
          - result: failed
        do:
          - cleanup
  run_bootstrap_script_dev:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: >-
        bash /tmp/st2_bootstrap.sh --dev=<% ctx().dev_build %>
        --<% ctx().pkg_env %>
        --<% ctx().release %>
        --user=<% ctx().st2_username %>
        --password=<% ctx().st2_password %>
      timeout: 900
    next:
      - when: <% succeeded() and (ctx().enterprise) %>
        do:
          - upgrade_to_enterprise
      - when: <% succeeded() and (not ctx().enterprise) %>
        do:
          - check_debug_mode
      - when: <% failed() %>
        publish:
          - result: failed
        do:
          - cleanup
  upgrade_to_enterprise:
    action: st2cd.st2_upgrade_to_enterprise
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      license_key: <% ctx().enterprise_key %>
      distro: <% ctx().distro %>
      pkg_env: <% ctx().pkg_env %>
      release: <% ctx().release %>
      version: <% coalesce(ctx().version, '') %>
      timeout: 150
    next:
      - when: <% succeeded() and not ctx().debug %>
        do:
          - check_debug_mode
      - when: <% succeeded() and ctx().debug %>
        do:
          - check_debug_mode
  check_debug_mode:
    action: core.noop
    next:
      - when: <% not ctx().debug %>
        do:
          - get_installed_version
      - when: <% ctx().debug %>
        do:
          - enable_debug_mode
  enable_debug_mode:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: crudini --set /etc/st2/st2.conf system debug True && st2ctl restart
      timeout: 120
    next:
      - do:
          - get_installed_version
  get_installed_version:
    action: st2cd.st2_get_installed_version
    input:
      host: <% ctx().vm_info.private_ip_address %>
    next:
      - when: <% succeeded() %>
        publish:
          - installed:
              distro: <% result().output.distro %>
              versions: <% result().output.versions %>
              version_str: <% result().output.versions.items().select( $[0] + "=" + $[1]).join("\n\t") %>
      - when: <% succeeded() %>
        do:
          - create_vm_windows
      - when: <% failed() %>
        publish:
          - result: failed
        do:
          - cleanup
  create_vm_windows:
    action: st2cd.create_vm_windows
    input:
      hostname: <% ctx().windows_hostname %>
      instance_type: <% ctx().instance_type %>
      environment: <% ctx().environment %>
      key_name: <% ctx().windows_key_name %>
      keyfile: <% ctx().windows_keyfile %>
      dns_zone: <% ctx().dns_zone %>
      distro: <% ctx().windows_distro %>
      role: <% ctx().role %>
    next:
      - when: <% succeeded() %>
        publish:
          - vm_windows_info: <% result().vm_info %>
          - vm_windows_id: <% result().vm_info.id %>
          - vm_windows_username: <% result().vm_username %>
          - vm_windows_password: <% result().vm_password %>
        do:
          - run_e2e_tests
      - when: <% failed() %>
        publish:
          - result: failed
        do:
          - cleanup
  run_e2e_tests:
    action: st2cd.st2_e2e_tests
    input:
      host_ip: <% ctx().vm_info.private_ip_address %>
      host_fqdn: <% ctx().vm_fqdn %>
      enterprise: <% ctx().enterprise %>
      version: <% ctx().version %>
      st2_username: <% ctx().st2_username %>
      st2_password: <% ctx().st2_password %>
      windows_host_ip: <% ctx().vm_windows_info.private_ip_address %>
      windows_host_fqdn: <% ctx().vm_windows_fqdn %>
      windows_username: <% ctx().vm_windows_username %>
      windows_password: <% ctx().vm_windows_password %>
    next:
      - when: <% succeeded() %>
        publish:
          - result: success
        do:
          - cleanup
      - when: <% failed()  %>
        publish:
          - result: failed
        do:
          - cleanup

  cleanup:
    action: core.noop
    next:
      # Don't clean anything up if we need to debug
      - when: <% ctx().debug %>
        do:
          - done_cleanup
      # Try to destroy the Linux and Windows VMs, if we need to
      - when: <% (not ctx().debug) and ctx().vm_id %>
        do:
          - destroy_vm
      - when: <% (not ctx().debug) and ctx().vm_windows_id %>
        do:
          - destroy_vm_windows

  destroy_vm:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().hostname %>
      instance_id: <% ctx().vm_id %>
    next:
      - when: <% succeeded() and ctx().vm_windows_id %>
        do:
          - destroy_vm_windows
      - when: <% succeeded() and not ctx().vm_windows_id %>
        do:
          - done_cleanup
      - when: <% failed() and (ctx().destroy_vm_iteration_count >= 2) and ctx().vm_windows_id %>
        publish:
          - result: failed
        do:
          - destroy_vm_windows
      - when: <% failed() and (ctx().destroy_vm_iteration_count < 2) %>
        publish:
          - destroy_vm_iteration_count: <% ctx().destroy_vm_iteration_count + 1 %>
        do:
          - sleep_destroy_vm
  sleep_destroy_vm:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm
  destroy_vm_windows:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().windows_hostname %>
      instance_id: <% ctx().vm_windows_id %>
    next:
      - when: <% succeeded() %>
        do:
          - done_cleanup
      - when: <% failed() and (ctx().destroy_vm_windows_iteration_count >= 2) %>
        publish:
          - result: failed
        do:
          - done_cleanup
      - when: <% failed() and (ctx().destroy_vm_windows_iteration_count < 2) %>
        publish:
          - destroy_vm_windows_iteration_count: <% ctx().destroy_vm_windows_iteration_count + 1 %>
        do:
          - sleep_destroy_vm_windows
  sleep_destroy_vm_windows:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm_windows

  done_cleanup:
    action: core.noop
    next:
      # If we destroyed both VMs, we can return success
      - when: <% ctx().result = "success" %>
        do:
          - notify_success
      # If we didn't destroy both VMs, we need to fail
      - when: <% ctx().result = "failed" %>
        do:
          - notify_failure
          - fail

  notify_success:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_e2e_test: SUCCEEDED'
      attachments: "[{\"fallback\": \"[st2ci.st2_pkg_e2e_test: SUCCEEDED]\", \"title\": \"[st2ci.st2_pkg_e2e_test: SUCCEEDED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx('st2').action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nENTERPRISE: <% ctx().enterprise %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nVERSION: <% coalesce(ctx().version, 'latest') %>\\nVERSION INSTALLED:\\n\\t<% ctx().installed.version_str %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#008000\"}]"
    next:
      - when: <% ctx().initial_commit %>
        do:
          - set_github_status_success
  set_github_status_success:
    action: github.add_status
    input:
      user: <% ctx().github_status_org %>
      repo: <% ctx().github_status_repo %>
      sha: <% ctx().initial_commit %>
      state: success
      context: <% ctx().github_status_context %>
      description: E2E tests have finished successfully
      target_url: <% ctx().github_status_url %>

  notify_failure:
    with:
      items: channel in <% ctx().notify_failure_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_e2e_test: FAILED'
      attachments: "[{\"fallback\": \"[st2ci.st2_pkg_e2e_test: FAILED]\", \"title\": \"[st2ci.st2_pkg_e2e_test: FAILED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx('st2').action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nENTERPRISE: <% ctx().enterprise %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nVERSION: <% coalesce(ctx().version, 'latest') %>\\nVERSION INSTALLED:\\n\\t<% ctx().installed.version_str %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#FF0000\"}]"
    next:
      - when: <% ctx().initial_commit %>
        do:
          - set_github_status_failure
  set_github_status_failure:
    action: github.add_status
    input:
      user: <% ctx().github_status_org %>
      repo: <% ctx().github_status_repo %>
      sha: <% ctx().initial_commit %>
      state: failure
      context: <% ctx().github_status_context %>
      description: E2E tests have failed
      target_url: <% ctx().github_status_url %>
